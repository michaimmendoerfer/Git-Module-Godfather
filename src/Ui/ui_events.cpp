// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.4
// LVGL version: 8.3.6
// Project name: Jeepify

#include <Arduino.h>
#include <String.h>
#include <nvs_flash.h>
#include "ui.h"
#include "components/ui_comp.h"
#include "lv_meter.h"
#include "PeerClass.h"
#include "pref_manager.h"
#include "LinkedList.h"
#include "Jeepify.h"
#include "ui_events.h"
#include "main.h"
//#include "ui_comp_buttonswitchsmall.h"

#pragma region Global_Definitions
lv_obj_t *SingleMeter;
lv_meter_indicator_t * SingleIndic;
lv_meter_indicator_t * SingleIndicNeedle;
lv_meter_scale_t * scale;
uint8_t MultiPosToChange;

PeriphClass *ActivePeriphSingle;
PeriphClass *ActivePeriphSwitch;

lv_obj_t *Ui_LedSnd;
lv_obj_t *Ui_LedRcv;
lv_obj_t *Ui_LedPair;

_lv_obj_t *MultiComponent[PERIPH_PER_SCREEN];

lv_timer_t *SingleTimer;
lv_timer_t *MultiTimer;
lv_timer_t *SwitchTimer;
lv_timer_t *SettingsTimer;

bool SpinnerSwitchVisible = false;

#define MAX_SWITCHES 4
PeriphClass *SwitchArray[4] = {NULL, NULL, NULL, NULL};
lv_obj_t    *SwitchArraySwitches[4] = {NULL, NULL, NULL, NULL};
lv_obj_t    *SwitchArraySpinners[4] = {NULL, NULL, NULL, NULL};
int          SwitchPositionX[4][4] = { {  15,   0,   0,   0},
									   { -50,  80,   0,   0},
									   {-100,  15, 130,   0},
									   {-120, -30,  60, 150} };

lv_obj_t * ui_ButtonSwitchSmall_create(lv_obj_t * comp_parent, int x, int y, int size, int Pos, char* PeerName, char *PeriphName);
lv_obj_t * ui_ButtonSwitchSpinner_create(lv_obj_t * comp_parent, int Pos);

// COMPONENT ButtonSwitchSmall
#define UI_COMP_BUTTONSWITCHSMALL_BUTTONSWITCHSMALL 0
#define UI_COMP_BUTTONSWITCHSMALL_LBLPEER 1
#define UI_COMP_BUTTONSWITCHSMALL_LBLPERIPH 2
#define UI_COMP_BUTTONSWITCHSMALL_LBLVALUE 3
#define UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION 4
#define _UI_COMP_BUTTONSWITCHSMALL_NUM 5

int FirstShownSwitch;

void GenerateSingleMeter(void);
void Keyboard_cb(lv_event_t * event);

void SingleUpdateTimer(lv_timer_t * timer);
void MultiUpdateTimer(lv_timer_t * timer);
void SwitchUpdateTimer(lv_timer_t * timer);
void SettingsUpdateTimer(lv_timer_t * timer);

void Ui_Multi_Button_Clicked(lv_event_t * e);
void Ui_Multi_Sensor_Clicked(lv_event_t * e);

#pragma endregion Global_Definitions

#pragma region Screen_Peer
void Ui_Peer_Prepare()
{
	if (ActivePeer) {
		lv_label_set_text_static(ui_LblPeerName, ActivePeer->GetName());
		switch (ActivePeer->GetType())
		{
			case SWITCH_1_WAY:	 lv_img_set_src(ui_ImgPeerType, &ui_img_1769637049); break;
			case SWITCH_2_WAY:	 lv_img_set_src(ui_ImgPeerType, &ui_img_horstrelais2_png); break;
			case SWITCH_4_WAY:	 lv_img_set_src(ui_ImgPeerType, &ui_img_ansgarmodule_4_png); break;
			case MONITOR_ROUND:	 lv_img_set_src(ui_ImgPeerType, &ui_img_rolfmodule_round_png); break;
			case MONITOR_BIG:	 lv_img_set_src(ui_ImgPeerType, &ui_img_friedermodule_disp_png); break;
			case BATTERY_SENSOR: lv_img_set_src(ui_ImgPeerType, &ui_img_friedermodule_disp_png); break;
		}	

		if (ActivePeer->GetSleepMode()) {
			lv_obj_add_state(ui_BtnPeer3, LV_STATE_CHECKED);
		}
		else {
			lv_obj_clear_state(ui_BtnPeer3, LV_STATE_CHECKED);
		}
		if (ActivePeer->GetDemoMode()) {
			lv_obj_add_state(ui_BtnPeer6, LV_STATE_CHECKED);
		}
		else {
			lv_obj_clear_state(ui_BtnPeer6, LV_STATE_CHECKED);
		}
	}
}
void Ui_Peer_Loaded(lv_event_t * e)
{
	if (!ActivePeer) ActivePeer = FindFirstPeer(MODULE_ALL);

	Ui_Peer_Prepare();
}

void Ui_Peer_Restart(lv_event_t * e)
{
	if (ActivePeer) SendCommand(ActivePeer, SEND_CMD_RESTART);
}

void Ui_Peer_Reset(lv_event_t * e)
{
	if (ActivePeer) SendCommand(ActivePeer, SEND_CMD_RESET);
}

void Ui_Peer_ToggleSleep(lv_event_t * e)
{
	if (ActivePeer) SendCommand(ActivePeer, SEND_CMD_SLEEPMODE_TOGGLE);
}

void Ui_Peer_ToggleDemo(lv_event_t * e)
{
	if (ActivePeer) SendCommand(ActivePeer, SEND_CMD_DEMOMODE_TOGGLE);
}

void Ui_Peer_Next(lv_event_t * e)
{
	Serial.println("Peer-Next");
	ActivePeer = FindNextPeer(ActivePeer, MODULE_ALL, true); 
	if (ActivePeer) Ui_Peer_Prepare();
}
void Ui_Peer_Prev(lv_event_t * e)
{
	ActivePeer = FindPrevPeer(ActivePeer, MODULE_ALL, true); 
	if (ActivePeer) Ui_Peer_Prepare();
}
void Ui_Peer_Delete(lv_event_t * e)
{
	if (ActivePeer) DeletePeer(ActivePeer);
}
#pragma endregion Screen_Peer
#pragma region Screen_Settings
void Ui_Set_WebSvr(lv_event_t * e)
{
	ToggleWebServer();
}

void Ui_Set_Prepare(lv_event_t * e)
{	
	uint32_t user_data = 10;
	if (SettingsTimer) 
		{
			lv_timer_resume(SettingsTimer);
			
			Serial.println("SettingsTimer resumed");
		}
		else 
		{
			SettingsTimer = lv_timer_create(SettingsUpdateTimer, 500,  &user_data);
			Serial.println("SettingsTimer created");
		}
}

void Ui_Set_TogglePair(lv_event_t * e)
{
	TogglePairMode();
}

void Ui_Set_Restart(lv_event_t * e)
{
	ESP.restart();
}

void Ui_Set_Reset(lv_event_t * e)
{
	nvs_flash_erase(); nvs_flash_init();
	ESP.restart();
}

void Ui_Set_ToggleDebug(lv_event_t * e)
{
	ToggleDebugMode();
}

void Ui_Set_SavePeers(lv_event_t * e)
{
    SavePeers();
	Self.SetChanged(false);
}
void SettingsUpdateTimer(lv_timer_t * timer)
{
	if (Self.GetPairMode()) lv_obj_add_state(ui_BtnSet2, LV_STATE_CHECKED);
	else lv_obj_clear_state(ui_BtnSet2, LV_STATE_CHECKED);
	
	if (Self.GetDebugMode()) lv_obj_add_state(ui_BtnSet7, LV_STATE_CHECKED);
	else lv_obj_clear_state(ui_BtnSet7, LV_STATE_CHECKED);
	
	if (Self.GetChanged()) lv_obj_add_state(ui_BtnSet8, LV_STATE_CHECKED);
	else lv_obj_clear_state(ui_BtnSet8, LV_STATE_CHECKED);

	if (WebServerActive) lv_obj_add_state(ui_BtnSet1, LV_STATE_CHECKED);
	else lv_obj_clear_state(ui_BtnSet1, LV_STATE_CHECKED);
}
void Ui_Set_Leave(lv_event_t * e)
{
	lv_timer_del(SettingsTimer);
	SettingsTimer = NULL;

	Serial.println("SettingsTimer deleted");
}

#pragma endregion Screen_Settings
#pragma region Screen_Peers
void Ui_Peers_Prepare(lv_event_t * e)
{
	String Options = "";
	PeerClass *P;

    for(int i = 0; i < PeerList.size(); i++){

		P = PeerList.get(i);

		if (Options != "") Options += "\n";
			
		if (millis()- P->GetTSLastSeen() > OFFLINE_INTERVAL) Options += "off: <";
		else Options += "on:  <"; 
			
		Options += P->GetName();

		switch (P->GetType()) {
			case SWITCH_1_WAY:   Options += "> PDC-1"; break;
			case SWITCH_2_WAY:   Options += "> PDC-2"; break;
			case SWITCH_4_WAY:   Options += "> PDC-4"; break;
			case SWITCH_8_WAY:   Options += "> PDC-8"; break;
			case PDC_SENSOR_MIX: Options += "> MIX";   break;
			case BATTERY_SENSOR: Options += "> Sens";  break;
			default:		     Options += "> ???";   break;
		}
	}
	
	lv_roller_set_options(ui_RollerPeers1, Options.c_str(), LV_ROLLER_MODE_NORMAL);
}

void Ui_Peers_Selected(lv_event_t * e)
{
	char buf[100];
	char SelectedName[50];
	
	lv_roller_get_selected_str(ui_RollerPeers1, buf, 100);
	Serial.print("Selected: ");
	Serial.println(buf);

  	char *Start = strchr(buf,'<'); 
	char *End = strchr(buf,'>'); 
	
  	memcpy(SelectedName, Start+1, End-Start-1);
	SelectedName[End-Start-1] = 0;
	Serial.println(SelectedName);

	PeerClass *TempPeer = FindPeerByName(SelectedName);

	if ((TempPeer) and (strcmp(SelectedName, "") != 0)) {
		ActivePeer = TempPeer;
		_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrPeer_screen_init);
	}
}
#pragma endregion Screen_Peers
#pragma region Screen_JSON
void Ui_JSON_Prepare(lv_event_t * e)
{
	PrepareJSON();
}
#pragma endregion Screen_JSON
#pragma region Screen_SingleMeter
void Ui_Single_Next(lv_event_t * e)
{	
	if (ActivePeriphSingle) 
	{
		ActivePeriphSingle = FindNextPeriph(NULL, ActivePeriphSingle, SENS_TYPE_SENS, true);
	}
	
	if (ActivePeriphSingle)
	{
		Ui_Single_Leave(e);
		Ui_Single_Prepare(e);
		//_ui_screen_change(&ui_ScrSingle, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrSingle_screen_init);
	}
}
void Ui_Single_Prev(lv_event_t * e)
{
	if (ActivePeriphSingle) 
	{
		ActivePeriphSingle = FindPrevPeriph(NULL, ActivePeriphSingle, SENS_TYPE_SENS, true);
	}
	
	if (ActivePeriphSingle)
	{
		Ui_Single_Leave(e);
		Ui_Single_Prepare(e);
		//_ui_screen_change(&ui_ScrSingle, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrSingle_screen_init);
	}
}
void Ui_Single_Prepare(lv_event_t * e)
{
	Serial.println("Single-Prepare");
	
	if (!ActivePeriphSingle) ActivePeriphSingle = FindFirstPeriph(NULL, SENS_TYPE_SENS);
		
	if (ActivePeriphSingle)
	{
		lv_label_set_text(ui_LblSinglePeriph, ActivePeriphSingle->GetName());
		lv_label_set_text(ui_LblSinglePeer, FindPeerById(ActivePeriphSingle->GetPeerId())->GetName());
	}
	else
	{
		lv_label_set_text(ui_LblSinglePeriph, "NoSens");
		lv_label_set_text(ui_LblSinglePeer, "NoPeer");
	}
	
	if (ActivePeriphSingle)
	{
		Serial.println("ActivePeriphSingle true");
		uint32_t user_data = 10;

		GenerateSingleMeter();
		Serial.println("Scale Generated");
		
		if (SingleTimer) 
		{
			lv_timer_resume(SingleTimer);
			
			Serial.println("SingleTimer resumed");
		}
		else 
		{
			SingleTimer = lv_timer_create(SingleUpdateTimer, 500,  &user_data);
			Serial.println("SingleTimer created");
		}

		Serial.println((unsigned)SingleTimer);
	}
}

void SingleUpdateTimer(lv_timer_t * timer)
{
	char buf[10];
	int nk = 0;
	float value;

	Serial.println("SinglUpdateTimer");
	
	if (ActivePeriphSingle)
	{
		lv_label_set_text(ui_LblSinglePeriph, ActivePeriphSingle->GetName());
		lv_label_set_text(ui_LblSinglePeer, FindPeerById(ActivePeriphSingle->GetPeerId())->GetName());
		
		value = ActivePeriphSingle->GetValue();
		//if (DebugMode) Serial.printf("Sensor: %s: %f\n", ActiveSens->Name, value);

		if      (value<10)  nk = 1;
		else if (value<100) nk = 1;
		else                nk = 0;

		if (value == -99) strcpy(buf, "--"); 
		else dtostrf(value, 0, nk, buf);

		if (ActivePeriphSingle->GetType() == SENS_TYPE_AMP)  strcat(buf, " A");
		if (ActivePeriphSingle->GetType() == SENS_TYPE_VOLT) strcat(buf, " V");
		
		lv_meter_set_indicator_value(SingleMeter, SingleIndicNeedle, value*10);
		lv_label_set_text(ui_LblSingleValue, buf);
	}
	else
	{
		lv_label_set_text(ui_LblSinglePeriph, "NoSens");
		lv_label_set_text(ui_LblSinglePeer, "NoPeer");
	}
}
void Ui_Single_Leave(lv_event_t * e)
{
	if (SingleTimer) 
	{
		lv_timer_del(SingleTimer);
		SingleTimer = NULL;
	
		Serial.println("SingleTimer deleted");
		
		lv_obj_del(SingleMeter);
		
		
		SingleMeter       = NULL;
		scale             = NULL;
		SingleIndicNeedle = NULL;
	}
}

static void SingleMeter_cb(lv_event_t * e) {

	lv_obj_draw_part_dsc_t	*dsc  = (lv_obj_draw_part_dsc_t *)lv_event_get_param(e);
	double					value;

	if( dsc->text != NULL ) {		// Filter major ticks...
		value = dsc->value / 10;
		snprintf(dsc->text, sizeof(dsc->text), "%5.1f", value);
	}

}
void GenerateSingleMeter(void)
{
	SingleMeter = lv_meter_create(ui_ScrSingle);
	lv_obj_center(SingleMeter);
	lv_obj_set_style_bg_color(SingleMeter, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_set_style_bg_opa(SingleMeter, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_set_size(SingleMeter, 235,	235);
	scale = lv_meter_add_scale(SingleMeter);
	
	//lv_obj_move_background(SingleMeter);
	lv_obj_set_style_text_color(SingleMeter, lv_color_hex(0x000000), LV_PART_TICKS);
	
	SingleIndicNeedle = lv_meter_add_needle_line(SingleMeter, scale, 4, lv_color_hex(0x444444), -10);
	
	if ((ActivePeriphSingle) and (ActivePeriphSingle->GetType() == SENS_TYPE_AMP))
	{
		lv_meter_set_scale_ticks(SingleMeter, scale, 41, 3, 10, lv_palette_main(LV_PALETTE_GREY));
    	lv_meter_set_scale_major_ticks(SingleMeter, scale, 5, 4, 15, lv_color_black(), 15);
    	lv_meter_set_scale_range(SingleMeter, scale, 0, 400, 240, 150);
	
		//Add a green arc to the start
		SingleIndic = lv_meter_add_scale_lines(SingleMeter, scale, lv_palette_main(LV_PALETTE_GREEN), lv_palette_main(LV_PALETTE_GREEN), false, 0);
    	lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 0);
    	lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 250);

		SingleIndic = lv_meter_add_arc(SingleMeter, scale, 3, lv_palette_main(LV_PALETTE_RED), 0);
    	lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 300);
    	lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 400);

		//Make the tick lines red at the end of the scale
		SingleIndic = lv_meter_add_scale_lines(SingleMeter, scale, lv_palette_main(LV_PALETTE_RED), lv_palette_main(LV_PALETTE_RED), false, 0);
		lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 300);
		lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 400);

		lv_obj_add_event_cb(SingleMeter, SingleMeter_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
	}
	else if ((ActivePeriphSingle) and (ActivePeriphSingle->GetType() == SENS_TYPE_VOLT))
	{	
		lv_meter_set_scale_ticks(SingleMeter, scale, 31, 2, 10, lv_palette_main(LV_PALETTE_GREY));
    	lv_meter_set_scale_major_ticks(SingleMeter, scale, 5, 4, 20, lv_color_black(), 20);
    	lv_meter_set_scale_range(SingleMeter, scale, 90, 150, 240, 150);
	
		SingleIndic = lv_meter_add_scale_lines(SingleMeter, scale, lv_palette_main(LV_PALETTE_RED), lv_palette_main(LV_PALETTE_RED), false, 0);
    	lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 90);
    	lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 112);
		
		//Add a green arc to the start
		SingleIndic = lv_meter_add_scale_lines(SingleMeter, scale, lv_palette_main(LV_PALETTE_GREEN), lv_palette_main(LV_PALETTE_GREEN), false, 0);
    	lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 112);
    	lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 144);

		SingleIndic = lv_meter_add_arc(SingleMeter, scale, 3, lv_palette_main(LV_PALETTE_RED), 0);
    	lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 144);
    	lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 150);

		//Make the tick lines red at the end of the scale
		SingleIndic = lv_meter_add_scale_lines(SingleMeter, scale, lv_palette_main(LV_PALETTE_RED), lv_palette_main(LV_PALETTE_RED), false, 0);
		lv_meter_set_indicator_start_value(SingleMeter, SingleIndic, 144);
		lv_meter_set_indicator_end_value(SingleMeter, SingleIndic, 150);

		//Add draw callback to override default values
		lv_obj_add_event_cb(SingleMeter, SingleMeter_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
	}
}
#pragma endregion Screen_SingleMeter
#pragma region Screen_MultiMeter
void Ui_Multi_Loaded(lv_event_t * e)
{
	static uint32_t user_data = 10;
		
	lv_label_set_text(ui_LblMultiScreenName,Screen[ActiveMultiScreen].GetName());
					
	for (int Pos=0; Pos<PERIPH_PER_SCREEN; Pos++)
	{
		int x; int y;
		switch (Pos) {
			case 0: x=-80; y=-50; break;
			case 1: x= 80; y=-50; break;
			case 2: x=-80; y= 90; break;
			case 3: x= 80; y= 90; break;
		}

		PeriphClass *P =  Screen[ActiveMultiScreen].GetPeriph(Pos);
		if (P)
		{
			lv_obj_add_flag(lv_obj_get_child(lv_scr_act(), Pos+1), LV_OBJ_FLAG_HIDDEN);
			if (P->IsSensor())
			{	
				lv_obj_t *ui_ButtonSensorSmall = ui_ButtonSensorSmall_create(ui_ScrMulti);
				lv_obj_set_x(ui_ButtonSensorSmall, x);
				lv_obj_set_y(ui_ButtonSensorSmall, y);

				MultiComponent[Pos] = ui_ButtonSensorSmall;
				
				lv_obj_t *SensButton           = ui_comp_get_child(ui_ButtonSensorSmall, UI_COMP_BUTTONSENSORSMALL_BUTTONSENSORSMALL);
				lv_obj_t *SensButtonPeerName   = ui_comp_get_child(ui_ButtonSensorSmall, UI_COMP_BUTTONSENSORSMALL_LBLSENSSMALLPEER);
				lv_obj_t *SensButtonPeriphName = ui_comp_get_child(ui_ButtonSensorSmall, UI_COMP_BUTTONSENSORSMALL_LBLSENSSMALLPERIPH);
				lv_obj_t *SensButtonPos        = ui_comp_get_child(ui_ButtonSensorSmall, UI_COMP_BUTTONSENSORSMALL_LBLSENSPOS);
				
				lv_label_set_text_fmt(SensButtonPeerName,   "%.6s", FindPeerById(P->GetPeerId())->GetName());
				lv_label_set_text_fmt(SensButtonPeriphName, "%.6s", P->GetName());
				lv_label_set_text_fmt(SensButtonPos, "%d", Pos);

				lv_obj_add_event_cb(ui_ButtonSensorSmall, Ui_Multi_Sensor_Clicked, LV_EVENT_ALL, NULL);  
			}
			else if (P->IsSwitch())
			{
				lv_obj_t *ui_ButtonSwitchSmall = ui_ButtonSwitchSmall_create(ui_ScrMulti, x, y, 1, Pos, FindPeerById(P->GetPeerId())->GetName(), P->GetName());
				
				MultiComponent[Pos] = ui_ButtonSwitchSmall;
				
				lv_obj_t *SwitchButton           = ui_comp_get_child(ui_ButtonSwitchSmall, UI_COMP_BUTTONSWITCHSMALL_BUTTONSWITCHSMALL);
				lv_obj_t *SwitchButtonPeerName   = ui_comp_get_child(ui_ButtonSwitchSmall, UI_COMP_BUTTONSWITCHSMALL_LBLPEER);
				lv_obj_t *SwitchButtonPeriphName = ui_comp_get_child(ui_ButtonSwitchSmall, UI_COMP_BUTTONSWITCHSMALL_LBLPERIPH);
				lv_obj_t *SwitchButtonPos        = ui_comp_get_child(ui_ButtonSwitchSmall, UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION);

				if (P->GetValue() == 1) 
					lv_imgbtn_set_state(SwitchButton, LV_IMGBTN_STATE_CHECKED_RELEASED);

				lv_obj_add_event_cb(ui_ButtonSwitchSmall, Ui_Multi_Button_Clicked, LV_EVENT_ALL, NULL);  
			}
		}
		else
		{
			lv_obj_clear_flag(lv_obj_get_child(lv_scr_act(), Pos+1), LV_OBJ_FLAG_HIDDEN);
		}
	}
	if (MultiTimer) 
	{
		lv_timer_resume(MultiTimer);
		Serial.println("MultiTimer resumed");
	}
	else 
	{
		MultiTimer = lv_timer_create(MultiUpdateTimer, 500,  &user_data);
		Serial.println("MultiTimer created");
	}
}
void MultiUpdateTimer(lv_timer_t * timer)
{
	_lv_obj_t *ComponentValue;
	_lv_obj_t *ComponentARC;
	
	static char ValueBuf[10];
	static int nk = 0;
	static float value;
	lv_color_t bg;

	Serial.printf("MultiTimer - Screen[%d] \n\r",ActiveMultiScreen);
	
	for (int Pos=0; Pos<4; Pos++) 
	{
		if (Screen[ActiveMultiScreen].GetPeriphId(Pos) >= 0)
		{
			value = Screen[ActiveMultiScreen].GetPeriph(Pos)->GetValue();
		
			if      (value<10)  nk = 2;
			else if (value<100) nk = 1;
			else                nk = 0;

			if (value == -99) strcpy(ValueBuf, "--"); 
			else dtostrf(value, 0, nk, ValueBuf);

			switch (Screen[ActiveMultiScreen].GetPeriph(Pos)->GetType()) 
			{
				case SENS_TYPE_AMP:
					ComponentValue = ui_comp_get_child(MultiComponent[Pos], UI_COMP_BUTTONSENSORSMALL_LBLSENSSMALLVALUE);
			
					strcat(ValueBuf, " A");
					
					if 		(value < 20) bg = lv_color_hex(0x135A25);
					else if (value < 25) bg = lv_color_hex(0x7C7E26);
					else 				 bg = lv_color_hex(0x88182C);

					lv_obj_set_style_bg_color(MultiComponent[Pos], bg, LV_PART_MAIN | LV_STATE_DEFAULT);
					lv_label_set_text(ComponentValue, ValueBuf);

					ComponentARC = ui_comp_get_child(MultiComponent[Pos], UI_COMP_BUTTONSENSORSMALL_ARC2);
					lv_arc_set_range(ComponentARC, 0, 400);
					lv_arc_set_value(ComponentARC, value*10);
					
					break;
				case SENS_TYPE_VOLT:
					ComponentValue = ui_comp_get_child(MultiComponent[Pos], UI_COMP_BUTTONSENSORSMALL_LBLSENSSMALLVALUE);
					
					strcat(ValueBuf, " V");
					
					if 		(value < 13)   bg = lv_color_hex(0x135A25);
					else if (value < 14.4) bg = lv_color_hex(0x7C7E26);
					else 				   bg = lv_color_hex(0x88182C);

					lv_obj_set_style_bg_color(MultiComponent[Pos], bg, LV_PART_MAIN | LV_STATE_DEFAULT);
					lv_label_set_text(ComponentValue, ValueBuf);

					ComponentARC = ui_comp_get_child(MultiComponent[Pos], UI_COMP_BUTTONSENSORSMALL_ARC2);
					lv_arc_set_range(ComponentARC, 90, 150);
					lv_arc_set_value(ComponentARC, value*10);

					break;
				case SENS_TYPE_SWITCH:
					lv_obj_t *Button = ui_comp_get_child(MultiComponent[Pos], UI_COMP_BUTTONSWITCHSMALL_BUTTONSWITCHSMALL);
						
					if (value == 1) 
					{
						//Serial.printf("Button %d ist 1", Pos);
						lv_imgbtn_set_state(Button, LV_IMGBTN_STATE_CHECKED_RELEASED);
					}
					else
					{
						//Serial.printf("Button %d ist 0", Pos);
						lv_imgbtn_set_state(Button, LV_IMGBTN_STATE_RELEASED);
					}
					//AMP noch einfügen
					break;
			}
		}
	}
}
void Ui_Multi_Button_Clicked(lv_event_t * e)
{
	lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t * target = lv_event_get_target(e);
    
	if(event_code == LV_EVENT_CLICKED) {
        lv_obj_t *Button = ui_comp_get_child(target, UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION);
	
		int Pos = atoi(lv_label_get_text(Button));

		ToggleSwitch(Screen[ActiveMultiScreen].GetPeer(Pos), Screen[ActiveMultiScreen].GetPeriph(Pos)->GetPos());
		Serial.printf("Toggleswitch Pos:%d, PeerName:%s\n\r", Screen[ActiveMultiScreen].GetPeriph(Pos)->GetPos(), Screen[ActiveMultiScreen].GetPeer(Pos)->GetName());
    }	
	if(event_code == LV_EVENT_LONG_PRESSED) {
        lv_obj_t *Button = ui_comp_get_child(target, UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION);
	
		MultiPosToChange = atoi(lv_label_get_text(Button));

		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
    }
}
void Ui_Multi_Sensor_Clicked(lv_event_t * e)
{
	lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t * target = lv_event_get_target(e);
    
	if(event_code == LV_EVENT_CLICKED) {
        lv_obj_t *Sensor = ui_comp_get_child(target, UI_COMP_BUTTONSENSORSMALL_LBLSENSPOS);
	
		int Pos = atoi(lv_label_get_text(Sensor));
		ActivePeriph = Screen[ActiveMultiScreen].GetPeriph(Pos);
		ActivePeer   = Screen[ActiveMultiScreen].GetPeer(Pos);
		
		_ui_screen_change(&ui_ScrSingle, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrSingle_screen_init);
    }	
	if(event_code == LV_EVENT_LONG_PRESSED) {
        lv_obj_t *Button = ui_comp_get_child(target, UI_COMP_BUTTONSENSORSMALL_LBLSENSPOS);
	
		MultiPosToChange = atoi(lv_label_get_text(Button));

		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
    }
}
void Ui_Multi_Set_Panel1(lv_event_t * e)
{
	if (PeriphList.size() > 0) 
	{
		MultiPosToChange = 0;
		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
	}
}
void Ui_Multi_Set_Panel2(lv_event_t * e)
{
	if (PeriphList.size() > 0) 
	{
		MultiPosToChange = 1;
		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
	}
}
void Ui_Multi_Set_Panel3(lv_event_t * e)
{
	if (PeriphList.size() > 0) 
	{
		MultiPosToChange = 2;
		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
	}
}
void Ui_Multi_Set_Panel4(lv_event_t * e)
{
	if (PeriphList.size() > 0) 
	{
		MultiPosToChange = 3;
		_ui_screen_change(&ui_ScrPeriph, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeriph_screen_init);
	}
}
void Ui_Multi_Unload(lv_event_t * e)
{
	if (MultiTimer) lv_timer_del(MultiTimer);
	MultiTimer = NULL;
	Serial.println("MultiTimer deleted");
	
	for (int Pos = 0; Pos<PERIPH_PER_SCREEN; Pos++)
	{
		if (MultiComponent[Pos])
		{
			lv_obj_del(MultiComponent[Pos]);
			MultiComponent[Pos] = NULL;
			Serial.printf("Switch %d deleted.\n\r", Pos);
		}
	}
}
void Ui_Multi_Next(lv_event_t * e)
{
	ActiveMultiScreen++;
	if (ActiveMultiScreen == MULTI_SCREENS) ActiveMultiScreen = 0;
	Serial.printf("Schalte auf MultiScreen: %d\n\r", ActiveMultiScreen);
	
	for (int Pos = 0; Pos<PERIPH_PER_SCREEN; Pos++)
	{
		if (MultiComponent[Pos])
		{
			lv_obj_add_flag(lv_obj_get_child(MultiComponent[Pos], 0), LV_OBJ_FLAG_HIDDEN);
			lv_obj_add_flag(lv_obj_get_child(MultiComponent[Pos], 1), LV_OBJ_FLAG_HIDDEN);
			lv_obj_add_flag(lv_obj_get_child(MultiComponent[Pos], 2), LV_OBJ_FLAG_HIDDEN);
			lv_obj_del(MultiComponent[Pos]);
			MultiComponent[Pos] = NULL;
		}
	}

	Ui_Multi_Loaded(e);
	//_ui_screen_change(&ui_ScrMulti, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrMulti_screen_init);
}
void Ui_Multi_Prev(lv_event_t * e)
{
	ActiveMultiScreen--;
	if (ActiveMultiScreen == -1) ActiveMultiScreen = MULTI_SCREENS-1;
	Serial.printf("Schalte auf MultiScreen: %d\n\r", ActiveMultiScreen);
	
	for (int Pos = 0; Pos<PERIPH_PER_SCREEN; Pos++)
	{
		if (MultiComponent[Pos])
		{
			lv_obj_del(MultiComponent[Pos]);
			MultiComponent[Pos] = NULL;
		}
	}
	
	Ui_Multi_Loaded(e);
	//_ui_screen_change(&ui_ScrMulti, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrMulti_screen_init);
}
#pragma endregion Screen_MultiMeter
#pragma region Screen_Switch
void SwitchUpdateTimer(lv_timer_t * timer)
{
	Serial.println("Begin SwitchTimer");
	for (int Pos = 0; Pos<MAX_SWITCHES; Pos++)
	{
		if (SwitchArray[Pos]) 
		{
			if (SwitchArray[Pos]->GetValue() == 1)
			{
				lv_imgbtn_set_state(SwitchArraySwitches[Pos], LV_IMGBTN_STATE_CHECKED_RELEASED);
			
				//ggf show Sens-brother

				lv_obj_t *BrotherValueLbl;
				if (SwitchArray[Pos]->GetBrotherId() != -1)   
				{
					PeriphClass *Brother = FindPeriphById(SwitchArray[Pos]->GetBrotherId());
					if (Brother)
					{
						char buf[10];
						int nk = 0;
						float value = Brother->GetValue();
						
						if      (value<10)  nk = 2;
						else if (value<100) nk = 1;
						else                nk = 0;

						if (value == -99) strcpy(buf, "--"); 
						else dtostrf(value, 0, nk, buf);

						strcat(buf, " A");

						BrotherValueLbl = ui_comp_get_child(SwitchArraySwitches[Pos], UI_COMP_BUTTONSWITCHSMALL_LBLVALUE);
				
						lv_label_set_text(BrotherValueLbl, buf);
						lv_obj_clear_flag(BrotherValueLbl, LV_OBJ_FLAG_HIDDEN);
					}
					else
					{
						lv_obj_add_flag(BrotherValueLbl, LV_OBJ_FLAG_HIDDEN);
					}
				}
			}
			else
			{
				lv_imgbtn_set_state(SwitchArraySwitches[Pos], LV_IMGBTN_STATE_RELEASED);
			}
			
			if (SwitchArray[Pos]->GetChanged() == false)
			{
				if (SwitchArraySpinners[Pos]) lv_obj_add_flag(SwitchArraySpinners[Pos], LV_OBJ_FLAG_HIDDEN);
			}
		}
		
	}
}
void Ui_Switch_Next(lv_event_t * e)
{
	PeriphClass *TestPeriph = FindNextPeerPeriph(FindPeerById(ActivePeriphSwitch->GetPeerId()), SENS_TYPE_SWITCH, true);

	if (TestPeriph)
	{
		for (int Pos = 0; Pos<MAX_SWITCHES; Pos++)
		{
			SwitchArray[Pos] = NULL;
			if (SwitchArraySwitches[Pos])
			{
				lv_obj_add_flag(ui_comp_get_child(SwitchArraySwitches[Pos], UI_COMP_BUTTONSWITCHSMALL_LBLPEER),   LV_OBJ_FLAG_HIDDEN);
				lv_obj_add_flag(ui_comp_get_child(SwitchArraySwitches[Pos], UI_COMP_BUTTONSWITCHSMALL_LBLPERIPH), LV_OBJ_FLAG_HIDDEN);
				lv_obj_add_flag(ui_comp_get_child(SwitchArraySwitches[Pos], UI_COMP_BUTTONSWITCHSMALL_LBLVALUE),  LV_OBJ_FLAG_HIDDEN);
				
				lv_obj_del(SwitchArraySwitches[Pos]);
				SwitchArraySwitches[Pos] = NULL;
			}
		}
		ActivePeriphSwitch = TestPeriph;
		Ui_Switch_Loaded(e);
	}
}
void Ui_Switch_Clicked(lv_event_t * e)
{
	lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t * target = lv_event_get_target(e);
    
	if (event_code == LV_EVENT_CLICKED) {
        lv_obj_t *Button = ui_comp_get_child(target, UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION);
		Serial.printf("Button-Clicked: %s", lv_label_get_text(Button));
		int Pos = atoi(lv_label_get_text(Button));

		ToggleSwitch(SwitchArray[Pos]);
		Serial.printf("Toggleswitch Pos:%d, PeerName:%s\n\r", SwitchArray[Pos]->GetPos(), FindPeerById(SwitchArray[Pos]->GetPeerId())->GetName());

		if (SwitchArraySpinners[Pos]) 
		{
			lv_obj_clear_flag(SwitchArraySpinners[Pos], LV_OBJ_FLAG_HIDDEN);
		}
		else
		{
			SwitchArraySpinners[Pos] = ui_ButtonSwitchSpinner_create(ui_ScrSwitch, Pos);
			lv_obj_clear_flag(SwitchArraySpinners[Pos], LV_OBJ_FLAG_HIDDEN);
			lv_obj_move_foreground(SwitchArraySwitches[Pos]);
		}
    }	
}
void Ui_Switch_Long(lv_event_t * e)
{
}
void Ui_Switch_Prev(lv_event_t * e)
{
	PeriphClass *TestPeriph = FindPrevPeerPeriph(FindPeerById(ActivePeriphSwitch->GetPeerId()), SENS_TYPE_SWITCH, true);
	
	if (TestPeriph)
	{
		for (int Pos = 0; Pos<MAX_SWITCHES; Pos++)
		{
			SwitchArray[Pos] = NULL;
			if (SwitchArraySwitches[Pos])
			{
				lv_obj_del(SwitchArraySwitches[Pos]);
				SwitchArraySwitches[Pos] = NULL;
			}
		}
		ActivePeriphSwitch = TestPeriph;
		Ui_Switch_Loaded(e);
	}
}
void Ui_Switch_Loaded(lv_event_t * e)
{
	if (!ActivePeriphSwitch) 
	{
		Serial.println("No ActivePeriphSwitch");
		ActivePeriphSwitch = FindNextPeriph(NULL, NULL, SENS_TYPE_SWITCH, true);
	}	
	if (ActivePeriphSwitch)
	{
		//switch (FindPeerById(ActivePeriphSwitch->GetPeerId())->GetType())
		
		int AnzSwitchesInPeer = 0;
		for (int i=0; i<PeriphList.size(); i++)
		{
			if ( (PeriphList.get(i)->GetPeerId() == ActivePeriphSwitch->GetPeerId()) and (PeriphList.get(i)->GetType() == SENS_TYPE_SWITCH) )
				AnzSwitchesInPeer++;
		}

		PeriphClass *ActualSwitch = ActivePeriphSwitch;

		for (int Pos = 0; Pos<MAX_SWITCHES; Pos++)
		{
			if (ActualSwitch) 
			{
				SwitchArray[Pos] = ActualSwitch;
				Serial.printf("Switch %s found., Peer ist %s.\n\r", SwitchArray[Pos]->GetName(), FindPeerById(SwitchArray[Pos]->GetPeerId())->GetName());

				SwitchArraySwitches[Pos] = ui_ButtonSwitchSmall_create(ui_ScrSwitch, SwitchPositionX[AnzSwitchesInPeer-1][Pos], 0, 2, Pos, FindPeerById(SwitchArray[Pos]->GetPeerId())->GetName(), SwitchArray[Pos]->GetName());
				lv_obj_add_event_cb(SwitchArraySwitches[Pos], Ui_Switch_Clicked, LV_EVENT_ALL, NULL);  
				
				if (SwitchArraySwitches[Pos]) Serial.printf("Switch %d created.\n\r", Pos);

				ActualSwitch = FindNextPeriph(FindPeerById(SwitchArray[Pos]->GetPeerId()), ActualSwitch, SENS_TYPE_SWITCH, false);
			}
			else
			{
				SwitchArray[Pos] = NULL;
				if (SwitchArraySwitches[Pos])
				{
					lv_obj_del(SwitchArraySwitches[Pos]);
					lv_obj_remove_event_cb(SwitchArraySwitches[Pos], Ui_Switch_Clicked);
					SwitchArraySwitches[Pos] = NULL;

					Serial.printf("Switch %d deleted.\n\r", Pos);
				}

			}
		}
	}
	else
	{
		//lv_label_set_text(ui_LblSwitchPeriph, "n.n.");
	}

	static uint32_t user_data = 10;
	if (!SwitchTimer) { 
		SwitchTimer = lv_timer_create(SwitchUpdateTimer, 500,  &user_data);
	}
	else {
		lv_timer_resume(SwitchTimer);
	}
}
void Ui_Switch_Leave(lv_event_t * e)
{
	Serial.println("Switch_leave:");

	if (SwitchTimer) 
	{
		lv_timer_del(SwitchTimer);
		SwitchTimer = NULL;
	}
	
	for (int Pos = 0; Pos<MAX_SWITCHES; Pos++)
	{
		if (SwitchArraySwitches[Pos])
		{
			lv_obj_del(SwitchArraySwitches[Pos]);
			SwitchArraySwitches[Pos] = NULL;

			Serial.printf("Switch %d deleted.\n\r", Pos);
		}
		if (SwitchArraySpinners[Pos])
		{
			lv_obj_del(SwitchArraySpinners[Pos]);
			SwitchArraySpinners[Pos] = NULL;

			Serial.printf("Spinner %d deleted.\n\r", Pos);
		}
	}	
}
#pragma endregion Screen_Switch
#pragma region Screen_PeriphChoice
void Ui_PeriphChoice_Next(lv_event_t * e)
{
	if (ActivePeriph) {
		PeriphClass *PeriphT = FindNextPeriph(NULL, ActivePeriph, SENS_TYPE_ALL, true);
		if (PeriphT) 
		{
			ActivePeriph = PeriphT;
			Ui_Periph_Choice_Loaded(e);
		}
	}
}

void Ui_PeriphChoice_Last(lv_event_t * e)
{
	if (ActivePeriph) {
		PeriphClass *PeriphT = FindPrevPeriph(NULL, ActivePeriph, SENS_TYPE_ALL, true);
		if (PeriphT) 
		{
			ActivePeriph = PeriphT;
			Ui_Periph_Choice_Loaded(e);
		}
	}
}

void Ui_PeriphChoice_Click(lv_event_t * e)
{
	Screen[ActiveMultiScreen].AddPeriph(MultiPosToChange, ActivePeriph);
	Self.SetChanged(true);
	_ui_screen_change(&ui_ScrMulti, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrMulti_screen_init);
}

void Ui_Periph_Choice_Loaded(lv_event_t * e)
{
	Serial.println("PeriphChoice loaded");

	PeerClass *P;
	if (!ActivePeriph) {
		ActivePeriph = FindFirstPeriph(NULL, SENS_TYPE_ALL);
	}
	Serial.printf("aktueller Periph: %s", ActivePeriph->GetName());

	if (ActivePeriph) {
		Serial.println("ActivePeriph in PeriphCoice");

		P = FindPeerById(ActivePeriph->GetPeerId());

		lv_label_set_text(ui_LblPeriphChoicePeriph, ActivePeriph->GetName());
		lv_label_set_text(ui_LblPeriphChoicePeer, P->GetName());
	
		if (millis()- P->GetTSLastSeen() > OFFLINE_INTERVAL) 
			lv_label_set_text(ui_LblPeriphChoiceOnline, "Offline");
      	else 
			lv_label_set_text(ui_LblPeriphChoiceOnline, "Online");

		switch (ActivePeriph->GetType()) {
			case SENS_TYPE_SWITCH:	lv_label_set_text(ui_LblPeriphChoiceType, "Switch"); 
									lv_img_set_src(ui_ImgPeerChoice, &ui_img_menubtn2_png);
									break;
			case SENS_TYPE_AMP:		lv_label_set_text(ui_LblPeriphChoiceType, "Amp-Sensor"); 
									lv_img_set_src(ui_ImgPeerChoice, &ui_img_menubtn1_png);
									break;
			case SENS_TYPE_VOLT:	lv_label_set_text(ui_LblPeriphChoiceType, "Volt-Sensor"); 
									lv_img_set_src(ui_ImgPeerChoice, &ui_img_menubtn1_png);
									break;
			default:				lv_label_set_text(ui_LblPeriphChoiceType, "unknown type"); break;
		}
		Serial.println("ActivePeriph in PeriphCoice fertig");
	}
	Serial.println("PeriphCoice ende");
}
void Ui_Periph_Choice_prepare(lv_event_t * e)
{
	if (!ActivePeriphSwitch) ActivePeriphSwitch = FindNextPeriph(NULL, NULL, SENS_TYPE_SWITCH, true);
	if (ActivePeriphSwitch) _ui_screen_change(&ui_ScrSwitch, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScrSwitch_screen_init);
}
#pragma endregion Screen_PeriphChoice
#pragma region System_TimerAndInit
void TopUpdateTimer(lv_timer_t * timer)
{
	if ((TSMsgSnd) and (millis() - TSMsgSnd < MSGLIGHT_INTERVAL)) {
		lv_led_on(Ui_LedSnd);
	}
	else {
		lv_led_off(Ui_LedSnd);
		TSMsgSnd = 0;

	}

	if ((TSMsgRcv) and (millis() - TSMsgRcv < MSGLIGHT_INTERVAL)) {
		lv_led_on(Ui_LedRcv);
	}
	else {
		lv_led_off(Ui_LedRcv);
		TSMsgRcv = 0;
	}

	if ((TSPair)  and (millis() - TSPair < PAIR_INTERVAL)){
		lv_led_on(Ui_LedPair);
	}
	else {
		lv_led_off(Ui_LedPair);
		TSPair = 0;
		Self.SetPairMode(false);
	}
}

void Ui_Init_Custom(lv_event_t * e)
{
	lv_obj_set_parent(ui_BtnNavIn, lv_layer_top());
	lv_obj_set_parent(ui_NavPanel, lv_layer_top());
	
	//LED-Layer
	static uint32_t user_data = 10; 
	char LEDSize = 10;
	lv_timer_t * timer = lv_timer_create(TopUpdateTimer, 100,  &user_data);

	Ui_LedRcv  = lv_led_create(lv_layer_top());
	lv_obj_set_size(Ui_LedRcv, LEDSize, LEDSize);
    lv_obj_align(Ui_LedRcv, LV_ALIGN_CENTER, 440, 150);
    lv_led_set_color(Ui_LedRcv, lv_palette_main(LV_PALETTE_GREEN));
	lv_led_off(Ui_LedRcv);

    Ui_LedSnd  = lv_led_create(lv_layer_top());
	lv_obj_set_size(Ui_LedSnd, LEDSize, LEDSize);
    lv_obj_align(Ui_LedSnd, LV_ALIGN_CENTER, 420, 150);
    lv_led_set_color(Ui_LedSnd, lv_palette_main(LV_PALETTE_BLUE));

    Ui_LedPair  = lv_led_create(lv_layer_top());
    lv_obj_set_size(Ui_LedPair, LEDSize, LEDSize);
	lv_obj_align(Ui_LedPair, LV_ALIGN_CENTER, 440, 150);
    lv_led_set_color(Ui_LedPair, lv_palette_main(LV_PALETTE_RED));

	//Keyboard
	static const char* kb_map[] = { "1", "2", "3", "\n",
								"4", "5", "6", "\n",
								"7", "8", "9", "\n",
								"." ,"0", LV_SYMBOL_BACKSPACE,"\n",
								LV_SYMBOL_CLOSE, LV_SYMBOL_OK, "" };
	static const lv_btnmatrix_ctrl_t kb_ctrl[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1};
    
	lv_keyboard_set_map(ui_Keyboard, LV_KEYBOARD_MODE_USER_1, kb_map, kb_ctrl);
    lv_keyboard_set_mode(ui_Keyboard, LV_KEYBOARD_MODE_USER_1);
	lv_obj_add_event_cb(ui_Keyboard, Keyboard_cb, LV_EVENT_READY, NULL);

	//lv_label_set_text(ui_LblMenuVersion, _Version);
}

void Keyboard_cb(lv_event_t * event)
{
    CalibVolt();
	_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeer_screen_init);
}
#pragma endregion System_TimerAndInit
#pragma region System_Eichen
void Ui_Eichen_Start(lv_event_t * e)
{
	SendCommand(ActivePeer, SEND_CMD_CURRENT_CALIB);
	TSMsgSnd = millis();
	_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeer_screen_init);
}

void Ui_Volt_Prepare(lv_event_t * e)
{
	if (ActivePeer) lv_label_set_text(ui_LblVoltPeer, ActivePeer->GetName());
}
void Ui_Volt_Start(lv_event_t * e)
{
	CalibVolt();
	_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_NONE, 0, 0, &ui_ScrPeer_screen_init);
}

#pragma endregion System_Eichen

void Ui_Single_Last(lv_event_t * e)
{
	// Your code here
}

void Ui_Peer_Last(lv_event_t * e)
{
	// Your code here
}


// COMPONENT ButtonSwitchSmall

lv_obj_t * ui_ButtonSwitchSmall_create(lv_obj_t * comp_parent, int x, int y, int size, int Pos, char* PeerName, char *PeriphName)
{	
	lv_obj_t * cui_ButtonSwitchSmall;	
	cui_ButtonSwitchSmall = lv_imgbtn_create(comp_parent);
    lv_imgbtn_set_src(cui_ButtonSwitchSmall, LV_IMGBTN_STATE_RELEASED, NULL, &ui_img_1640860301, NULL);
    lv_imgbtn_set_src(cui_ButtonSwitchSmall, LV_IMGBTN_STATE_PRESSED, NULL, &ui_img_743505413, NULL);
    lv_imgbtn_set_src(cui_ButtonSwitchSmall, LV_IMGBTN_STATE_CHECKED_PRESSED, NULL, &ui_img_743505413, NULL);
    lv_imgbtn_set_src(cui_ButtonSwitchSmall, LV_IMGBTN_STATE_CHECKED_RELEASED, NULL, &ui_img_888658411, NULL);
    lv_obj_set_height(cui_ButtonSwitchSmall, 120);
    lv_obj_set_width(cui_ButtonSwitchSmall, 70);   /// 1
    lv_obj_set_x(cui_ButtonSwitchSmall, x);
    lv_obj_set_y(cui_ButtonSwitchSmall, y);
    lv_obj_set_align(cui_ButtonSwitchSmall, LV_ALIGN_CENTER);
    lv_obj_add_flag(cui_ButtonSwitchSmall, LV_OBJ_FLAG_CHECKABLE);     /// Flags
    lv_obj_add_flag(cui_ButtonSwitchSmall, LV_OBJ_FLAG_OVERFLOW_VISIBLE);     /// Flags
	
	lv_obj_t *cui_LblSwitchPeer = lv_label_create(cui_ButtonSwitchSmall);
    if (!PeerName) lv_obj_add_flag(cui_LblSwitchPeer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_set_width(cui_LblSwitchPeer, LV_SIZE_CONTENT);   /// 1
    lv_obj_set_height(cui_LblSwitchPeer, LV_SIZE_CONTENT);    /// 1
    if (size == 1)
	{
		lv_obj_set_align(cui_LblSwitchPeer, LV_ALIGN_BOTTOM_RIGHT);
		lv_obj_set_x(cui_LblSwitchPeer, -50);
    	lv_obj_set_y(cui_LblSwitchPeer, -5);
		lv_obj_set_style_text_font(cui_LblSwitchPeer, &lv_font_montserrat_14, LV_PART_MAIN | LV_STATE_DEFAULT);
	}
	else
	{
		lv_obj_set_x(cui_LblSwitchPeer, 0);
    	lv_obj_set_y(cui_LblSwitchPeer, -65);
		lv_obj_set_style_text_font(cui_LblSwitchPeer, &lv_font_montserrat_14, LV_PART_MAIN | LV_STATE_DEFAULT);
    	lv_obj_set_align(cui_LblSwitchPeer, LV_ALIGN_CENTER);
	}
    if (PeerName) lv_label_set_text_fmt(cui_LblSwitchPeer, "%.6s", PeerName);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_COLOR,
                                           _ui_theme_color_BtnTxt);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_OPA,
                                           _ui_theme_alpha_BtnTxt);
    lv_obj_set_style_radius(cui_LblSwitchPeer, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_COLOR,
                                           _ui_theme_color_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_OPA,
                                           _ui_theme_alpha_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR,
                                           _ui_theme_color_BtnBorder);
    ui_object_set_themeable_style_property(cui_LblSwitchPeer, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA,
                                           _ui_theme_alpha_BtnBorder);
    lv_obj_set_style_border_width(cui_LblSwitchPeer, 2, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_left(cui_LblSwitchPeer, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_right(cui_LblSwitchPeer, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_top(cui_LblSwitchPeer, 1, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_bottom(cui_LblSwitchPeer, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

	lv_obj_t *cui_LblSwitchPeriph = lv_label_create(cui_ButtonSwitchSmall);
    if (!PeriphName) lv_obj_add_flag(cui_LblSwitchPeriph, LV_OBJ_FLAG_HIDDEN);
	if (size == 1)
	{
		lv_obj_set_align(cui_LblSwitchPeriph, LV_ALIGN_BOTTOM_RIGHT);
		lv_obj_set_x(cui_LblSwitchPeriph, -50);
    	lv_obj_set_y(cui_LblSwitchPeriph, -90);
		lv_obj_set_style_text_font(cui_LblSwitchPeriph, &lv_font_montserrat_14, LV_PART_MAIN | LV_STATE_DEFAULT);
	}
	else
	{
		lv_obj_set_align(cui_LblSwitchPeriph, LV_ALIGN_CENTER);
		lv_obj_set_x(cui_LblSwitchPeriph, 0);
    	lv_obj_set_y(cui_LblSwitchPeriph, -95);
		lv_obj_set_style_text_font(cui_LblSwitchPeriph, &lv_font_montserrat_20, LV_PART_MAIN | LV_STATE_DEFAULT);
	}
	lv_obj_set_width(cui_LblSwitchPeriph, LV_SIZE_CONTENT);   /// 1
    lv_obj_set_height(cui_LblSwitchPeriph, LV_SIZE_CONTENT);    /// 1
    if (PeriphName) lv_label_set_text_fmt(cui_LblSwitchPeriph, "%.6s", PeriphName);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_COLOR,
                                           _ui_theme_color_BtnTxt);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_OPA,
                                           _ui_theme_alpha_BtnTxt);
    lv_obj_set_style_radius(cui_LblSwitchPeriph, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_COLOR,
                                           _ui_theme_color_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_OPA,
                                           _ui_theme_alpha_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR,
                                           _ui_theme_color_BtnBorder);
    ui_object_set_themeable_style_property(cui_LblSwitchPeriph, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA,
                                           _ui_theme_alpha_BtnBorder);
    lv_obj_set_style_border_width(cui_LblSwitchPeriph, 2, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_left(cui_LblSwitchPeriph, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_right(cui_LblSwitchPeriph, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_top(cui_LblSwitchPeriph, 1, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_bottom(cui_LblSwitchPeriph, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_t *cui_LblSwitchAmp = lv_label_create(cui_ButtonSwitchSmall);
    if (size == 1)
	{
		lv_obj_set_width(cui_LblSwitchAmp, LV_SIZE_CONTENT);
    	lv_obj_set_height(cui_LblSwitchAmp, LV_SIZE_CONTENT);    /// 1
		lv_obj_set_align(cui_LblSwitchAmp, LV_ALIGN_BOTTOM_LEFT);
		lv_obj_set_x(cui_LblSwitchAmp, 50);
    	lv_obj_set_y(cui_LblSwitchAmp, -5);
    	lv_obj_set_style_text_font(cui_LblSwitchAmp, &lv_font_montserrat_14, LV_PART_MAIN | LV_STATE_DEFAULT);
	}
	else 
	{
		lv_obj_set_width(cui_LblSwitchAmp, 80);
		lv_obj_set_height(cui_LblSwitchAmp, LV_SIZE_CONTENT);    /// 1
		lv_obj_set_x(cui_LblSwitchAmp, 0);
    	lv_obj_set_y(cui_LblSwitchAmp, 80);
    	lv_obj_set_align(cui_LblSwitchAmp, LV_ALIGN_CENTER);
		lv_obj_set_style_text_font(cui_LblSwitchAmp, &lv_font_montserrat_18, LV_PART_MAIN | LV_STATE_DEFAULT);
	}
    lv_label_set_text(cui_LblSwitchAmp, "28.8 A");
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_COLOR,
                                           _ui_theme_color_BtnTxt);
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_TEXT_OPA,
                                           _ui_theme_alpha_BtnTxt);
    lv_obj_set_style_text_align(cui_LblSwitchAmp, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_radius(cui_LblSwitchAmp, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_COLOR,
                                           _ui_theme_color_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BG_OPA,
                                           _ui_theme_alpha_BtnBg);
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR,
                                           _ui_theme_color_BtnBorder);
    ui_object_set_themeable_style_property(cui_LblSwitchAmp, LV_PART_MAIN | LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA,
                                           _ui_theme_alpha_BtnBorder);
    lv_obj_set_style_border_width(cui_LblSwitchAmp, 2, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_left(cui_LblSwitchAmp, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_right(cui_LblSwitchAmp, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_top(cui_LblSwitchAmp, 1, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_pad_bottom(cui_LblSwitchAmp, 1, LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_add_flag(cui_LblSwitchAmp, LV_OBJ_FLAG_HIDDEN);

    lv_obj_t * cui_LblPosition;
    cui_LblPosition = lv_label_create(cui_ButtonSwitchSmall);
    lv_obj_set_width(cui_LblPosition, LV_SIZE_CONTENT);   /// 1
    lv_obj_set_height(cui_LblPosition, LV_SIZE_CONTENT);    /// 1
    lv_obj_set_x(cui_LblPosition, 20);
    lv_obj_set_y(cui_LblPosition, 0);
    lv_obj_set_align(cui_LblPosition, LV_ALIGN_CENTER);
	lv_label_set_text_fmt(cui_LblPosition, "%d", Pos);
    lv_obj_set_style_text_color(cui_LblPosition, lv_color_hex(0xDBDBDB), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_text_opa(cui_LblPosition, 0, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_BUTTONSWITCHSMALL_NUM);
    children[UI_COMP_BUTTONSWITCHSMALL_BUTTONSWITCHSMALL] = cui_ButtonSwitchSmall;
    children[UI_COMP_BUTTONSWITCHSMALL_LBLPEER] = cui_LblSwitchPeer;
    children[UI_COMP_BUTTONSWITCHSMALL_LBLPERIPH] = cui_LblSwitchPeriph;
    children[UI_COMP_BUTTONSWITCHSMALL_LBLVALUE] = cui_LblSwitchAmp;
    children[UI_COMP_BUTTONSWITCHSMALL_LBLPOSITION] = cui_LblPosition;
	lv_obj_add_event_cb(cui_ButtonSwitchSmall, get_component_child_event_cb, (lv_event_code_t)LV_EVENT_GET_COMP_CHILD, children);
    lv_obj_add_event_cb(cui_ButtonSwitchSmall, del_component_child_event_cb, LV_EVENT_DELETE, children);
    //ui_comp_ButtonSwitchSmall_create_hook(cui_ButtonSwitchSmall);
    return cui_ButtonSwitchSmall;
}
lv_obj_t * ui_ButtonSwitchSpinner_create(lv_obj_t * comp_parent, int Pos)
{	
lv_obj_t *cui_SpinnerSwitch = lv_spinner_create(comp_parent, 1000, 90);
    lv_obj_set_width(cui_SpinnerSwitch, 100);
    lv_obj_set_height(cui_SpinnerSwitch, 100);
	Serial.printf("X von Schalter %d: %d", Pos, lv_obj_get_x(SwitchArraySwitches[Pos]));
	lv_obj_set_x(cui_SpinnerSwitch, lv_obj_get_x(SwitchArraySwitches[Pos])-(480-lv_obj_get_width(SwitchArraySwitches[Pos]))/2);
    lv_obj_set_y(cui_SpinnerSwitch, 0);
    lv_obj_set_align(cui_SpinnerSwitch, LV_ALIGN_CENTER);
    lv_obj_add_flag(cui_SpinnerSwitch, LV_OBJ_FLAG_HIDDEN);     /// Flags
    lv_obj_clear_flag(cui_SpinnerSwitch, LV_OBJ_FLAG_CLICKABLE);      /// Flags
    lv_obj_set_style_arc_color(cui_SpinnerSwitch, lv_color_hex(0x83061F), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_arc_opa(cui_SpinnerSwitch, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_arc_width(cui_SpinnerSwitch, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_arc_width(cui_SpinnerSwitch, 5, LV_PART_MAIN | LV_STATE_CHECKED);

    lv_obj_set_style_arc_color(cui_SpinnerSwitch, lv_color_hex(0x31020B), LV_PART_INDICATOR | LV_STATE_DEFAULT);
    lv_obj_set_style_arc_opa(cui_SpinnerSwitch, 255, LV_PART_INDICATOR | LV_STATE_DEFAULT);
    lv_obj_set_style_arc_width(cui_SpinnerSwitch, 5, LV_PART_INDICATOR | LV_STATE_CHECKED);

	return cui_SpinnerSwitch;
}